{"version":3,"sources":["WorkListItem.js","WorkList.js","Homepage.js","serviceWorker.js","index.js"],"names":["WorkItem","styled","Avatar","width","height","this","props","companyName","year","role","description","pathToImage","StyledAvatar","createStyledAvatar","Grid","item","xs","sm","alt","src","React","Component","WorkList","container","direction","justify","alignItems","spacing","workItems","map","WorkListItem","Homepage","Container","maxWidth","List","ListItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"23DAyCeA,G,mMAlCX,OAAOC,YAAOC,IAAPD,CAAe,CACpBE,MAAO,QACPC,OAAQ,Y,+BAIF,IAAD,EACuDC,KAAKC,MAA3DC,EADD,EACCA,YAAaC,EADd,EACcA,KAAMC,EADpB,EACoBA,KAAMC,EAD1B,EAC0BA,YAAaC,EADvC,EACuCA,YACxCC,EAAeP,KAAKQ,qBAC1B,OACE,kBAAC,WAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACL,EAAD,CAAcM,IAAI,KAAKC,IAAKR,KAE9B,kBAACG,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,4BACGV,EADH,KACkBC,EADlB,KAGA,4BAAKC,GACL,2BAAIC,S,GArBSU,IAAMC,Y,QCmBdC,E,iLAfX,OACE,kBAACR,EAAA,EAAD,CACES,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAS,GAERC,EAAUC,KAAI,SAAAvB,GAAK,OAClB,kBAACwB,EAAiBxB,W,GAXLc,IAAMC,WCiDdU,EA3Cf,6LAEI,OAAO9B,YAAOC,IAAPD,CAAe,CAGpBE,MAAO,QACPC,OAAQ,YANd,+BAUI,IAAMQ,EAAeP,KAAKQ,qBAC1B,OACE,kBAACmB,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACnB,EAAA,EAAD,CACES,WAAS,EACTC,UAAU,MACVC,QAAQ,SAERE,QAAS,GAET,kBAACb,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACL,EAAD,CAAcM,IAAI,KAAKC,IAAI,kBAC3B,6CACA,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gBAGJ,kBAACrB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACH,EAAA,EAAD,CACES,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,UAEX,kBAAC,EAAD,cAlCd,GAA8BN,IAAMC,WCDhBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD6HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cdfea0d3.chunk.js","sourcesContent":["import { Avatar, Grid } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\n\nclass WorkItem extends React.Component {\n  createStyledAvatar() {\n    return styled(Avatar)({\n      width: \"140px\",\n      height: \"140px\"\n    });\n  }\n\n  render() {\n    const { companyName, year, role, description, pathToImage } = this.props;\n    const StyledAvatar = this.createStyledAvatar();\n    return (\n      <Fragment>\n        <Grid item xs={6} sm={3}>\n          <StyledAvatar alt=\"me\" src={pathToImage} />\n        </Grid>\n        <Grid item xs={18} sm={9}>\n          <h3>\n            {companyName} ({year})\n          </h3>\n          <h4>{role}</h4>\n          <p>{description}</p>\n        </Grid>\n      </Fragment>\n    );\n  }\n}\n\nWorkItem.propTypes = {\n  companyName: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  role: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  pathToImage: PropTypes.string.isRequired\n};\n\nexport default WorkItem;\n","import { Avatar, Grid } from \"@material-ui/core\";\nimport React, { Fragment } from \"react\";\n\nimport WorkListItem from \"./WorkListItem\";\n\nimport workItems from \"./work\";\n\nclass WorkList extends React.Component {\n  render() {\n    return (\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={3}\n      >\n        {workItems.map(props => (\n          <WorkListItem {...props} />\n        ))}\n      </Grid>\n    );\n  }\n}\nexport default WorkList;\n","import {\n  Avatar,\n  Box,\n  Container,\n  Grid,\n  List,\n  ListItem\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport \"./Homepage.css\";\nimport WorkList from \"./WorkList\";\n\nexport class Homepage extends React.Component {\n  createStyledAvatar() {\n    return styled(Avatar)({\n      // \"margin-top\": \"32px\",\n      // \"margin-bottom\": \"32px\",\n      width: \"160px\",\n      height: \"160px\"\n    });\n  }\n  render() {\n    const StyledAvatar = this.createStyledAvatar();\n    return (\n      <Container maxWidth=\"lg\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          // alignItems=\"center\"\n          spacing={4}\n        >\n          <Grid item xs={6} sm={3}>\n            <StyledAvatar alt=\"me\" src=\"/img/stan.jpg\" />\n            <h1>Stanley Kwong</h1>\n            <List>\n              <ListItem>Hello</ListItem>\n            </List>\n          </Grid>\n          <Grid item xs={18} sm={9}>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <WorkList />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default Homepage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Homepage from \"./Homepage\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Homepage />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}